import type { NextApiRequest, NextApiResponse } from 'next';
import { executeDrawing } from '../../utils/raffle';
import { NETWORKS } from '../../config/networks';

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  // R√©cup√©rer le r√©seau depuis la requ√™te ou utiliser le d√©faut
  const networkName = (req.body.network as string) || 'moonbase';
  const network = NETWORKS[networkName];

  if (!network) {
    return res.status(400).json({ 
      error: 'R√©seau non support√©',
      details: `Le r√©seau ${networkName} n'est pas configur√©`
    });
  }

  try {
    console.log(`\nüåê Ex√©cution sur ${network.name}...`);
    
    const result = await executeDrawing(networkName);
    
    // Formater la r√©ponse sans d√©pendre des logs
    return res.status(200).json({ 
      success: true,
      network: network.name,
      details: {
        status: result.status,
        transactionHash: result.transactionHash,
        explorerUrl: result.explorerUrl,
        winners: result.winners,
        ...(result.status === 'early' && {
          currentBlock: result.currentBlock,
          targetBlock: result.targetBlock,
          remaining: result.remaining
        })
      }
    });

  } catch (error: any) {
    console.error('\n‚ùå API Error:', error);
    return res.status(500).json({ 
      error: 'Failed to execute drawing',
      network: network.name,
      details: error.message,
      stack: error.stack,
      path: process.cwd()
    });
  }
}